# -*- coding: utf-8 -*-
from django.shortcuts import render
from django.http import Http404
from music.forms import *
from django.db.models import Count
from music.models import *
from django.shortcuts import render
from django.conf import settings
import random
# Create your views here.
pending_pks=[7,
 8,
 10,
 12,
 13,
 14,
 21,
 24,
 28,
 33,
 36,
 37,
 38,
 39,
 42,
 44,
 45,
 48,
 50,
 51,
 53,
 54,
 55,
 56,
 60,
 64,
 66,
 70,
 72,
 74,
 75,
 77,
 78,
 79,
 83,
 86,
 87,
 88,
 89,
 93,
 94,
 95,
 96,
 98,
 100,
 101,
 102,
 105,
 106,
 110,
 111,
 112,
 114,
 115,
 117,
 118,
 121,
 124,
 128,
 129,
 131,
 132,
 133,
 135,
 137,
 138,
 140,
 141,
 142,
 143,
 145,
 146,
 147,
 149,
 152,
 153,
 154,
 155,
 156,
 157,
 158,
 160,
 163,
 164,
 165,
 166,
 167,
 168,
 169,
 171,
 172,
 174,
 176,
 179,
 180,
 182,
 183,
 184,
 185,
 190,
 192,
 193,
 194,
 195,
 201,
 202,
 205,
 207,
 208,
 209,
 211,
 218,
 220,
 222,
 223,
 229,
 230,
 231,
 232,
 233,
 239,
 243,
 246,
 247,
 249,
 253,
 257,
 258,
 259,
 261,
 263,
 264,
 267,
 269,
 272,
 273,
 274,
 275,
 276,
 280,
 281,
 282,
 283,
 284,
 285,
 287,
 290,
 291,
 292,
 294,
 296,
 297,
 299,
 300,
 301,
 302,
 303,
 307,
 308,
 309,
 310,
 314,
 315,
 316,
 317,
 318,
 322,
 325,
 328,
 329,
 330,
 333,
 334,
 335,
 338,
 340,
 341,
 342,
 344,
 347,
 348,
 352,
 353,
 357,
 359,
 361,
 363,
 366,
 368,
 369,
 372,
 373,
 374,
 375,
 376,
 377,
 378,
 380,
 381,
 382,
 384,
 386,
 387,
 390,
 391,
 395,
 396,
 399,
 403,
 405,
 406,
 408,
 411,
 412,
 413,
 415,
 416,
 417,
 419,
 420,
 421,
 422,
 425,
 428,
 429,
 431,
 432,
 435,
 436,
 437,
 439,
 442,
 443,
 449,
 450,
 453,
 456,
 458,
 459,
 460,
 467,
 469,
 473,
 476,
 477,
 478,
 481,
 482,
 483,
 484,
 485,
 487,
 490,
 491,
 493,
 494,
 498,
 499,
 500,
 501,
 504,
 507,
 508,
 510,
 511,
 512,
 513,
 514,
 515,
 517,
 520,
 522,
 525,
 527,
 532,
 534,
 535,
 536,
 537,
 541,
 542,
 543,
 544,
 545,
 546,
 549,
 551,
 552,
 553,
 555,
 558,
 561,
 563,
 565,
 566,
 567,
 569,
 570,
 571,
 573,
 574,
 575,
 576,
 580,
 584,
 586,
 587,
 589,
 590,
 592,
 595,
 598,
 601,
 602,
 604,
 605,
 606,
 607,
 608,
 609,
 610,
 613,
 614,
 616,
 618,
 620,
 623,
 625,
 628,
 630,
 632,
 633,
 639,
 641,
 642,
 645,
 646,
 650,
 653,
 654,
 655,
 657,
 659,
 662,
 663,
 665,
 666,
 672,
 673,
 676,
 677,
 681,
 682,
 685,
 686,
 687,
 688,
 691,
 693,
 696,
 699,
 700,
 701,
 702,
 704,
 709,
 710,
 712,
 714,
 715,
 717,
 719,
 720,
 721,
 723,
 724,
 727,
 728,
 729,
 730,
 731,
 738,
 739,
 742,
 743,
 744,
 747,
 748,
 750,
 751,
 753,
 757,
 758,
 762,
 764,
 765,
 766,
 767,
 768,
 769,
 770,
 771,
 774,
 775,
 776,
 777,
 778,
 779,
 781,
 782,
 783,
 784,
 788,
 789,
 790,
 791,
 795,
 796,
 799,
 800,
 802,
 804,
 805,
 808,
 809,
 811,
 812,
 813,
 814,
 815,
 816,
 817,
 819,
 822,
 823,
 829,
 832,
 834,
 835,
 837,
 839,
 840,
 841,
 842,
 843,
 847,
 848,
 849,
 850,
 851,
 853,
 855,
 858,
 860]


def pick_random_song_lowest_classifications():
    filtered_songs = Song.objects.filter(pk__in=pending_pks)
    songs = filtered_songs.annotate(num_classifications=Count('classifications')).order_by('num_classifications')
    lowest_song_num = songs[0].num_classifications
    selected_songs = []
    for s in songs:
        if s.num_classifications <= lowest_song_num:
            selected_songs.append(s)

    song = random.choice(selected_songs)
    return song


def get_songs_for_classification(request):
    """
    Selects 10 random songs that have the least amount of classifications.
    :param request:
    :return:
    """
    pass


def index(request):
    form = ParticipantForm()
    return render(request, 'music/home.html',{'participant_form': form})


def consentimiento_informado(request):
    return render(request, 'music/privacy-policy.html', {})


def song_classification(request):
    print request.POST
    if request.method == 'POST':
        # Create and save new classification
        participant = Participant.objects.get(pk=int(request.POST['participant_pk']))
        if request.POST['time']:
            time = float(request.POST['time'])
        classification = SongClassification(participant=participant, mood_label=request.POST['mood'])
        classification.time_taken = time
        classification.save()
        classified_song = Song.objects.get(pk=int(request.POST['song_pk']))
        classified_song.classifications.add(classification)
        classified_song.save()

        if int(request.POST['song_number']) == 10:
            # Redirect to thank you page
            return render(request, 'music/thank_you.html', {})
        else:
            # Get first song with lowest number of classifications
            song = pick_random_song_lowest_classifications()
            #song = Song.objects.get(pk=759)
            song_number = int(request.POST['song_number']) + 1
            return render(request, 'music/song_classification.html', {'song_number': song_number,
                                                                      'song': song,
                                                                      'num_songs': range(1, 11),
                                                                      'participant': participant})

    song = None
    return render(request, 'music/song_classification.html', {'song': song})


def start_classification(request):
    if request.method == "POST":
        participant_form = ParticipantForm(request.POST)
        if participant_form.is_valid():
            if participant_form.cleaned_data['email'] != "" and \
                    Participant.objects.filter(email=participant_form.cleaned_data['email']).exists():

                participant = Participant.objects.get(email=participant_form.cleaned_data['email'])
            else:
                participant = participant_form.save()

            # Get first song with lowest number of classifications
            # song = Song.objects.annotate(num_classifications=Count('classifications')).order_by('num_classifications')[0]
            song = pick_random_song_lowest_classifications()
            #song = Song.objects.get(pk=124)
            #return render(request, 'music/thank_you.html', {})
            return render(request, 'music/song_classification.html', {'song_number': 1,
                                                                      'song': song,
                                                                      'num_songs': range(1, 11),
                                                                      'participant': participant})
        else:
            form = ParticipantForm()
            return render(request, 'music/home.html', {'participant_form': participant_form})